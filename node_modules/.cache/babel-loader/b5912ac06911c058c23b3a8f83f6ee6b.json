{"ast":null,"code":"var _jsxFileName = \"/Users/carlospassos/Documents/Dev/estudo/ignite/Desafio01_ignite/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      api.get(`/products/?id=${productId}`).then(response => {\n        var _response$data$;\n\n        if (!response.data) {\n          throw new Error();\n        }\n\n        const filteredCart = cart.filter(product => product.id === productId);\n        const increasedAmount = ((_response$data$ = response.data[0]) === null || _response$data$ === void 0 ? void 0 : _response$data$.amount) + 1;\n\n        if (filteredCart.length > 0) {\n          updateProductAmount({\n            productId,\n            amount: increasedAmount\n          });\n        }\n\n        api.get(`/stock/?id=${productId}`).then(response => {\n          if (response.data[0].amount <= increasedAmount) {\n            toast.error('Quantidade solicitada fora de estoque');\n          }\n        }).catch(() => {\n          toast.error('Erro na adição do produto');\n        });\n        const product = response.data[0];\n        product.amount = 1;\n        const newCart = [...cart, response.data[0]];\n        setCart(newCart);\n        localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n      }).catch(() => {\n        toast.error('Erro na adição do produto');\n      });\n    } catch {\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = productId => {\n    try {\n      const newCart = cart.filter(product => productId !== product.id);\n      setCart(newCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n      toast.success('Produto Removido com sucesso!');\n    } catch {\n      toast.error('Não foi possível remover este produto!');\n      return;\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      api.get(`/stock/?id=${productId}`).then(response => {\n        const productStock = response.data[0].amount;\n\n        if (amount <= 0) {\n          throw new Error();\n        }\n\n        if (productStock < amount) {\n          toast.error('Quantidade solicitada fora de estoque');\n          return;\n        }\n\n        let newCart = cart;\n        newCart = newCart.map(product => product.id === productId ? { ...product,\n          amount: amount\n        } : product);\n        setCart(newCart);\n        localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n        return;\n      });\n    } catch {\n      toast.error('Não foi possível atualizar o carrinho!');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"yuvwwZIsxrDpvj1ES9WkyhAC5Ms=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/carlospassos/Documents/Dev/estudo/ignite/Desafio01_ignite/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","get","then","response","data","Error","filteredCart","filter","product","id","increasedAmount","amount","length","updateProductAmount","error","catch","newCart","setItem","stringify","removeProduct","success","productStock","map","useCart","context"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart')\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  })\n\n  const addProduct = async (productId: number) => {\n    try {\n        api.get(`/products/?id=${productId}`).then(response => {\n          if (!response.data) {\n            throw new Error();\n          }\n\n          const filteredCart = cart.filter(product => product.id === productId)\n          const increasedAmount = response.data[0]?.amount + 1\n          if (filteredCart.length > 0) {\n            updateProductAmount({productId, amount: increasedAmount})\n          }\n\n          api.get(`/stock/?id=${productId}`).then(response => {\n            if (response.data[0].amount <= increasedAmount) {\n              toast.error('Quantidade solicitada fora de estoque');\n            }\n          }).catch(() => {\n            toast.error('Erro na adição do produto');\n          });\n          \n          const product = response.data[0];\n          product.amount = 1;\n          const newCart = [...cart, response.data[0] ]\n          setCart(newCart);\n          localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n        }).catch( () => {\n          toast.error('Erro na adição do produto');\n        }\n        )\n    } catch {\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n\n      const newCart = cart.filter(product => productId !== product.id);\n\n      setCart(newCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n      toast.success('Produto Removido com sucesso!');\n\n    } catch {\n      toast.error('Não foi possível remover este produto!');\n      return\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      api.get(`/stock/?id=${productId}`).then(response => {\n        const productStock = response.data[0].amount;\n\n        if(amount <= 0 ) {\n          throw new Error()\n        }\n\n        if(productStock < amount) {\n          toast.error('Quantidade solicitada fora de estoque')   \n          return \n        }\n\n        let newCart = cart;\n        newCart = newCart.map(product => \n          product.id === productId ? {\n            ...product, amount: amount\n        } : product);\n\n        setCart(newCart);\n        localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n        return      \n\n      })\n    } catch {\n      toast.error('Não foi possível atualizar o carrinho!');\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}