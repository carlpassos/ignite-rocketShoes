{"ast":null,"code":"var _jsxFileName = \"/Users/carlospassos/Documents/Dev/estudo/ignite/Desafio01_ignite/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      api.get(`/stock/?id=${productId}`).then(response => {\n        api.get(`/products/?id=${productId}`).then(response => {\n          const product = response.data[0];\n          product.amount = 1;\n          const newCart = [...cart, response.data[0]];\n          setCart(newCart);\n          localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n        });\n      });\n    } catch {// TODO\n    }\n  };\n\n  const removeProduct = productId => {\n    try {\n      const newCart = cart.filter(product => productId !== product.id);\n      setCart(newCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n      toast.success('Produto Removido com sucesso!');\n    } catch {// TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      api.get(`/stock/?id=${productId}`).then(response => {\n        const productStock = response.data[0].amount;\n\n        if (productStock < amount) {\n          toast.error('Estoque insuficiente');\n          return;\n        }\n\n        let newCart = cart;\n        newCart = newCart.map(product => product.id === productId ? { ...product,\n          amount: amount\n        } : product);\n        setCart(newCart);\n        localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n        toast.success('Produto adicionado');\n        return;\n      });\n    } catch {// TODO\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"yuvwwZIsxrDpvj1ES9WkyhAC5Ms=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/carlospassos/Documents/Dev/estudo/ignite/Desafio01_ignite/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","get","then","response","product","data","amount","newCart","setItem","stringify","removeProduct","filter","id","success","updateProductAmount","productStock","error","map","useCart","context"],"mappings":"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","sourcesContent":["import { error } from 'node:console';\nimport { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { convertToObject } from 'typescript';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart')\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  })\n\n  const addProduct = async (productId: number) => {\n    try {\n      api.get(`/stock/?id=${productId}`).then(response => {\n        api.get(`/products/?id=${productId}`).then(response => {\n          const product = response.data[0];\n          product.amount = 1;\n          const newCart = [...cart, response.data[0] ]\n          setCart(newCart);\n          localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n        })\n      }\n      )\n    } catch {\n      // TODO\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n\n      const newCart = cart.filter(product => productId !== product.id);\n\n      setCart(newCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n      toast.success('Produto Removido com sucesso!');\n\n    } catch {\n      // TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      api.get(`/stock/?id=${productId}`).then(response => {\n        const productStock = response.data[0].amount;\n\n        if(productStock < amount) {\n          toast.error('Estoque insuficiente')    \n          return                 \n        }\n\n        let newCart = cart;\n        newCart = newCart.map(product => \n          product.id === productId ? {\n            ...product, amount: amount\n        } : product);\n\n        setCart(newCart);\n        localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n        toast.success('Produto adicionado');\n        return      \n\n      })\n    } catch {\n      // TODO\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}