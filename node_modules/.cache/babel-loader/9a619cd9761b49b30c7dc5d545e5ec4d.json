{"ast":null,"code":"var _jsxFileName = \"/Users/carlospassos/Documents/Dev/estudo/ignite/Desafio01_ignite/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      api.get(`/stock/?id=${productId}`).then(response => {\n        api.get(`/products/?id=${productId}`).then(response => {\n          const newCart = [...cart, response.data[0]];\n          setCart(newCart);\n          localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n        });\n      });\n    } catch {// TODO\n    }\n  };\n\n  const removeProduct = productId => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      api.get(`/stock/?id=${productId}`).then(response => {\n        const productStock = response.data[0].amount;\n\n        if (productStock >= amount) {\n          toast.error('Estoque insuficiente');\n          return;\n        }\n\n        let newCart = cart;\n        newCart = newCart.map(product => product.id === productId ? { ...product,\n          amount: amount\n        } : product);\n        console.log(newCart);\n      });\n    } catch {// TODO\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"yuvwwZIsxrDpvj1ES9WkyhAC5Ms=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/carlospassos/Documents/Dev/estudo/ignite/Desafio01_ignite/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","get","then","response","newCart","data","setItem","stringify","removeProduct","updateProductAmount","amount","productStock","error","map","product","id","console","log","useCart","context"],"mappings":";;;;AACA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,SAASC,GAAT,QAAoB,iBAApB;;AAmBA,MAAMC,WAAW,gBAAGL,aAAa,CAAkB,EAAlB,CAAjC;AAEA,OAAO,SAASM,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoE;AAAA;;AACzE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAY,MAAM;AAChD,UAAMQ,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAArB;;AAEA,QAAIF,YAAJ,EAAkB;AAChB,aAAOG,IAAI,CAACC,KAAL,CAAWJ,YAAX,CAAP;AACD;;AAED,WAAO,EAAP;AACD,GAR+B,CAAhC;;AAUA,QAAMK,UAAU,GAAG,MAAOC,SAAP,IAA6B;AAC9C,QAAI;AACFZ,MAAAA,GAAG,CAACa,GAAJ,CAAS,cAAaD,SAAU,EAAhC,EAAmCE,IAAnC,CAAwCC,QAAQ,IAAI;AAClDf,QAAAA,GAAG,CAACa,GAAJ,CAAS,iBAAgBD,SAAU,EAAnC,EAAsCE,IAAtC,CAA2CC,QAAQ,IAAI;AACrD,gBAAMC,OAAO,GAAG,CAAC,GAAGZ,IAAJ,EAAUW,QAAQ,CAACE,IAAT,CAAc,CAAd,CAAV,CAAhB;AACAZ,UAAAA,OAAO,CAACW,OAAD,CAAP;AACAT,UAAAA,YAAY,CAACW,OAAb,CAAqB,mBAArB,EAA0CT,IAAI,CAACU,SAAL,CAAeH,OAAf,CAA1C;AACD,SAJD;AAKD,OAND;AAQD,KATD,CASE,MAAM,CACN;AACD;AACF,GAbD;;AAeA,QAAMI,aAAa,GAAIR,SAAD,IAAuB;AAC3C,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GAND;;AAQA,QAAMS,mBAAmB,GAAG,OAAO;AACjCT,IAAAA,SADiC;AAEjCU,IAAAA;AAFiC,GAAP,KAGD;AACzB,QAAI;AACFtB,MAAAA,GAAG,CAACa,GAAJ,CAAS,cAAaD,SAAU,EAAhC,EAAmCE,IAAnC,CAAwCC,QAAQ,IAAI;AAClD,cAAMQ,YAAY,GAAGR,QAAQ,CAACE,IAAT,CAAc,CAAd,EAAiBK,MAAtC;;AAEA,YAAGC,YAAY,IAAID,MAAnB,EAA2B;AACzBvB,UAAAA,KAAK,CAACyB,KAAN,CAAY,sBAAZ;AACA;AACD;;AAED,YAAIR,OAAO,GAAGZ,IAAd;AACAY,QAAAA,OAAO,GAAGA,OAAO,CAACS,GAAR,CAAYC,OAAO,IAC3BA,OAAO,CAACC,EAAR,KAAef,SAAf,GAA2B,EACzB,GAAGc,OADsB;AACbJ,UAAAA,MAAM,EAAEA;AADK,SAA3B,GAEEI,OAHM,CAAV;AAKAE,QAAAA,OAAO,CAACC,GAAR,CAAYb,OAAZ;AAMD,OApBD;AAqBD,KAtBD,CAsBE,MAAM,CACN;AACD;AACF,GA7BD;;AA+BA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEZ,MAAAA,IAAF;AAAQO,MAAAA,UAAR;AAAoBS,MAAAA,aAApB;AAAmCC,MAAAA;AAAnC,KADT;AAAA,cAGGlB;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAxEeD,Y;;KAAAA,Y;AA0EhB,OAAO,SAAS4B,OAAT,GAAoC;AAAA;;AACzC,QAAMC,OAAO,GAAGlC,UAAU,CAACI,WAAD,CAA1B;AAEA,SAAO8B,OAAP;AACD;;IAJeD,O","sourcesContent":["import { error } from 'node:console';\nimport { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { convertToObject } from 'typescript';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart')\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  })\n\n  const addProduct = async (productId: number) => {\n    try {\n      api.get(`/stock/?id=${productId}`).then(response => {\n        api.get(`/products/?id=${productId}`).then(response => {\n          const newCart = [...cart, response.data[0] ]\n          setCart(newCart);\n          localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n        })\n      }\n      )\n    } catch {\n      // TODO\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      api.get(`/stock/?id=${productId}`).then(response => {\n        const productStock = response.data[0].amount;\n\n        if(productStock >= amount) {\n          toast.error('Estoque insuficiente')    \n          return                 \n        }\n\n        let newCart = cart;\n        newCart = newCart.map(product => \n          product.id === productId ? {\n            ...product, amount: amount\n        } : product);\n\n        console.log(newCart);\n\n\n\n        \n\n      })\n    } catch {\n      // TODO\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}