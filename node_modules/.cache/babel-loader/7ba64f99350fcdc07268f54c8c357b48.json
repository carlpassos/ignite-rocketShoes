{"ast":null,"code":"var _jsxFileName = \"/Users/carlospassos/Documents/Dev/estudo/ignite/Desafio01_ignite/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      api.get(`/products/?id=${productId}`).then(response => {\n        const product = response.data[0];\n        api.get(`/stock/?id=${productId}`).then(response => {\n          const stock = response.data[0].amount; //verificar se o produto j치 est치 no carrinho\n\n          const cartFiltered = cart.filter(product => product.id === productId);\n          let newCart = cart;\n\n          if (cartFiltered.length === 0) {\n            stock > 0 && newCart.push(product);\n            setCart(newCart);\n            localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n            return;\n          }\n        });\n      });\n    } catch {}\n  };\n\n  const removeProduct = productId => {\n    try {} catch {}\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {} catch {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"yuvwwZIsxrDpvj1ES9WkyhAC5Ms=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/carlospassos/Documents/Dev/estudo/ignite/Desafio01_ignite/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","get","then","response","product","data","stock","amount","cartFiltered","filter","id","newCart","length","push","setItem","stringify","removeProduct","updateProductAmount","useCart","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AAEA,SAASC,GAAT,QAAoB,iBAApB;;AAmBA,MAAMC,WAAW,gBAAGJ,aAAa,CAAkB,EAAlB,CAAjC;AAEA,OAAO,SAASK,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoE;AAAA;;AACzE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAY,MAAM;AAChD,UAAMO,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAArB;;AAEA,QAAIF,YAAJ,EAAkB;AAChB,aAAOG,IAAI,CAACC,KAAL,CAAWJ,YAAX,CAAP;AACD;;AAED,WAAO,EAAP;AACD,GAR+B,CAAhC;;AAUA,QAAMK,UAAU,GAAG,MAAOC,SAAP,IAA6B;AAC9C,QAAI;AACDZ,MAAAA,GAAG,CAACa,GAAJ,CAAS,iBAAgBD,SAAU,EAAnC,EAAsCE,IAAtC,CAA2CC,QAAQ,IAAI;AACtD,cAAMC,OAAO,GAAGD,QAAQ,CAACE,IAAT,CAAc,CAAd,CAAhB;AAEAjB,QAAAA,GAAG,CAACa,GAAJ,CAAS,cAAaD,SAAU,EAAhC,EAAmCE,IAAnC,CAAwCC,QAAQ,IAAI;AAClD,gBAAMG,KAAK,GAAGH,QAAQ,CAACE,IAAT,CAAc,CAAd,EAAiBE,MAA/B,CADkD,CAGlD;;AACA,gBAAMC,YAAY,GAAGhB,IAAI,CAACiB,MAAL,CAAYL,OAAO,IAAIA,OAAO,CAACM,EAAR,KAAeV,SAAtC,CAArB;AACA,cAAIW,OAAO,GAAGnB,IAAd;;AACA,cAAIgB,YAAY,CAACI,MAAb,KAAwB,CAA5B,EAA+B;AAC7BN,YAAAA,KAAK,GAAG,CAAR,IAAaK,OAAO,CAACE,IAAR,CAAaT,OAAb,CAAb;AACAX,YAAAA,OAAO,CAACkB,OAAD,CAAP;AACAhB,YAAAA,YAAY,CAACmB,OAAb,CAAqB,mBAArB,EAA0CjB,IAAI,CAACkB,SAAL,CAAeJ,OAAf,CAA1C;AACA;AACD;AAEF,SAbD;AAeA,OAlBD;AAmBF,KApBD,CAoBE,MAAM,CAEP;AACF,GAxBD;;AA0BA,QAAMK,aAAa,GAAIhB,SAAD,IAAuB;AAC3C,QAAI,CAEH,CAFD,CAEE,MAAM,CAEP;AACF,GAND;;AAQA,QAAMiB,mBAAmB,GAAG,OAAO;AACjCjB,IAAAA,SADiC;AAEjCO,IAAAA;AAFiC,GAAP,KAGD;AACzB,QAAI,CAEH,CAFD,CAEE,MAAM,CAEP;AACF,GATD;;AAWA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEf,MAAAA,IAAF;AAAQO,MAAAA,UAAR;AAAoBiB,MAAAA,aAApB;AAAmCC,MAAAA;AAAnC,KADT;AAAA,cAGG1B;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA/DeD,Y;;KAAAA,Y;AAiEhB,OAAO,SAAS4B,OAAT,GAAoC;AAAA;;AACzC,QAAMC,OAAO,GAAGjC,UAAU,CAACG,WAAD,CAA1B;AAEA,SAAO8B,OAAP;AACD;;IAJeD,O","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart')\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  })\n\n  const addProduct = async (productId: number) => {\n    try {\n       api.get(`/products/?id=${productId}`).then(response => {\n        const product = response.data[0];\n\n        api.get(`/stock/?id=${productId}`).then(response => {\n          const stock = response.data[0].amount;\n\n          //verificar se o produto j치 est치 no carrinho\n          const cartFiltered = cart.filter(product => product.id === productId);\n          let newCart = cart;\n          if (cartFiltered.length === 0) {\n            stock > 0 && newCart.push(product);\n            setCart(newCart);\n            localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n            return\n          }\n\n        })\n\n       })\n    } catch {\n      \n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n\n    } catch {\n      \n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      \n    } catch {\n      \n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}