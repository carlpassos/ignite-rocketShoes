{"ast":null,"code":"var _jsxFileName = \"/Users/carlospassos/Documents/Dev/estudo/ignite/Desafio01_ignite/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      const {\n        data\n      } = await api.get(`stock/${productId}`);\n      const stock = data;\n      const productExists = cart.find(product => product.id === productId);\n\n      if (!productExists && stock.amount > 0) {\n        const responseProducts = await api.get(`products/${productId}`);\n        const newCart = [...cart, { ...responseProducts.data,\n          amount: 1\n        }];\n        setCart(newCart);\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(newCart));\n      } else if (productExists && productExists.amount <= stock.amount) {\n        const amount = productExists.amount + 1;\n        updateProductAmount({\n          productId: productId,\n          amount\n        });\n      } else {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n      }\n    } catch {\n      toast.error(\"Erro na adição do produto\");\n    }\n  };\n\n  const removeProduct = productId => {\n    try {} catch {}\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {} catch {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"yuvwwZIsxrDpvj1ES9WkyhAC5Ms=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/carlospassos/Documents/Dev/estudo/ignite/Desafio01_ignite/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","data","get","stock","productExists","find","product","id","amount","responseProducts","newCart","setItem","stringify","updateProductAmount","error","removeProduct","useCart","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,GAAT,QAAoB,iBAApB;;AAmBA,MAAMC,WAAW,gBAAGL,aAAa,CAAkB,EAAlB,CAAjC;AAEA,OAAO,SAASM,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoE;AAAA;;AACzE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAY,MAAM;AAChD,UAAMQ,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAArB;;AAEA,QAAIF,YAAJ,EAAkB;AAChB,aAAOG,IAAI,CAACC,KAAL,CAAWJ,YAAX,CAAP;AACD;;AAED,WAAO,EAAP;AACD,GAR+B,CAAhC;;AAUA,QAAMK,UAAU,GAAG,MAAOC,SAAP,IAA6B;AAC9C,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMb,GAAG,CAACc,GAAJ,CAAS,SAAQF,SAAU,EAA3B,CAAvB;AACA,YAAMG,KAAY,GAAGF,IAArB;AACA,YAAMG,aAAa,GAAGZ,IAAI,CAACa,IAAL,CAAUC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeP,SAApC,CAAtB;;AAGA,UAAG,CAACI,aAAD,IAAkBD,KAAK,CAACK,MAAN,GAAe,CAApC,EAAsC;AACpC,cAAMC,gBAAgB,GAAG,MAAMrB,GAAG,CAACc,GAAJ,CAC5B,YAAWF,SAAU,EADO,CAA/B;AAIA,cAAMU,OAAO,GAAG,CAAC,GAAGlB,IAAJ,EAAU,EAAE,GAAGiB,gBAAgB,CAACR,IAAtB;AAA4BO,UAAAA,MAAM,EAAE;AAApC,SAAV,CAAhB;AAEAf,QAAAA,OAAO,CAACiB,OAAD,CAAP;AACAf,QAAAA,YAAY,CAACgB,OAAb,CACE,mBADF,EAEEd,IAAI,CAACe,SAAL,CAAeF,OAAf,CAFF;AAID,OAZD,MAYO,IAAIN,aAAa,IAAIA,aAAa,CAACI,MAAd,IAAwBL,KAAK,CAACK,MAAnD,EAA2D;AAChE,cAAMA,MAAM,GAAGJ,aAAa,CAACI,MAAd,GAAuB,CAAtC;AACAK,QAAAA,mBAAmB,CAAC;AAClBb,UAAAA,SAAS,EAAEA,SADO;AAElBQ,UAAAA;AAFkB,SAAD,CAAnB;AAID,OANM,MAMA;AACLrB,QAAAA,KAAK,CAAC2B,KAAN,CAAY,uCAAZ;AACD;AACF,KA3BD,CA2BE,MAAM;AACN3B,MAAAA,KAAK,CAAC2B,KAAN,CAAY,2BAAZ;AACD;AACF,GA/BD;;AAiCA,QAAMC,aAAa,GAAIf,SAAD,IAAuB;AAC3C,QAAI,CAEH,CAFD,CAEE,MAAM,CAEP;AACF,GAND;;AAQA,QAAMa,mBAAmB,GAAG,OAAO;AACjCb,IAAAA,SADiC;AAEjCQ,IAAAA;AAFiC,GAAP,KAGD;AACzB,QAAI,CAEH,CAFD,CAEE,MAAM,CAEP;AACF,GATD;;AAWA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEhB,MAAAA,IAAF;AAAQO,MAAAA,UAAR;AAAoBgB,MAAAA,aAApB;AAAmCF,MAAAA;AAAnC,KADT;AAAA,cAGGtB;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAtEeD,Y;;KAAAA,Y;AAwEhB,OAAO,SAAS0B,OAAT,GAAoC;AAAA;;AACzC,QAAMC,OAAO,GAAGhC,UAAU,CAACI,WAAD,CAA1B;AAEA,SAAO4B,OAAP;AACD;;IAJeD,O","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart')\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  })\n\n  const addProduct = async (productId: number) => {\n    try {\n      const { data } = await api.get(`stock/${productId}`);\n      const stock: Stock = data; \n      const productExists = cart.find(product => product.id === productId);\n\n\n      if(!productExists && stock.amount > 0){\n        const responseProducts = await api.get<Product>(\n          `products/${productId}`\n        );\n        \n        const newCart = [...cart, { ...responseProducts.data, amount: 1 }];\n        \n        setCart(newCart);\n        localStorage.setItem(\n          \"@RocketShoes:cart\",\n          JSON.stringify(newCart)\n        );\n      } else if (productExists && productExists.amount <= stock.amount) {\n        const amount = productExists.amount + 1;\n        updateProductAmount({\n          productId: productId,\n          amount\n        });\n      } else {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n      }\n    } catch {\n      toast.error(\"Erro na adição do produto\");\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n\n    } catch {\n      \n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      \n    } catch {\n      \n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}